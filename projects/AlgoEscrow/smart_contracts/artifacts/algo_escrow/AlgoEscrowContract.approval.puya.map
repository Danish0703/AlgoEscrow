{
  "version": 3,
  "sources": [
    "C:/Users/WELCOME/Downloads/zk-algo-prove-main/zk-algo-prove-main/AlgoEscrow/projects/AlgoEscrow/smart_contracts/algo_escrow/AlgoEscrowContract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;AAAA;;AA0LE;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAxCA;;AAAA;AAAA;AAAA;;AAAA;AA1GF;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0GE;;;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AA3CA;;AAAA;AAAA;AAAA;;AAAA;AA/CF;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+CE;;;AAAA;;AA3BA;;AAAA;AAAA;AAAA;;AAAA;AApBF;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBE;;;AAAA;;AApBF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAoBE;;;AAMa;;AAAJ;;AAAA;AAAP;AACA;;AAAA;AAvBF;AAyBE;;AAAA;AAxBF;;AAyBE;;AAAA;AAxBF;;AAyBE;;AAAA;AAtBF;;AAuBE;;AAAA;AAtBF;;AAuBmC;AAAjC;AAzBF;AA0B8B;AAA5B;AAvBF;AAwB4B;;AAA1B;AAvBF;;;;;;;;;;;AAwBgC;;AAA9B;AAvBF;AAwBkC;;AAAhC;AAEI;;;;;;;;;;;;;;;AAAJ;;AAQF;;;AACa;;AA5Cb;AAAA;AAAA;AAAA;AA4CS;AAAP;AArCF;AAAA;AAAA;AAAA;AAuCgC;;AAA5B;AAAA;;;AAvCJ;AAAA;AAAA;AAAA;AAwCkC;;AAA5B;AADF;;;;AADF;AAvCF;AAAA;;AAAA;AAAA;AA6CI;;AAAA;;AAAA;AADF;AA7CF;AAAA;;AAAA;AAAA;AAkDI;AAAA;AADF;AAnDF;AAAA;;AAAA;AAAA;AAwDQ;AACH;AAEH;AA7DF;AAAA;;AAAA;AAAA;;;;;;;AA6DE;;;AAGO;;;AAHP;AAMA;AAAkC;AAAlC;AA9DF;;AA8DE;AAAA;AAhEF;AAAA;AAAA;AAAA;AAiEE;AAjEF;AAiEE;AAAA;AA5DF;AA6DkC;;AAAhC;AAhEF;AAAA;;AAAA;AAAA;AADA;AAAA;;AAAA;AAAA;AAmEM;AAAJ;;;AAjEF;AAkE8B;;AAA1B;AACI;;;;;;;;;;;;;;;;;AAAJ;;AAnEJ;AAqE8B;;AAA1B;AACI;;;;;;;;;;;;;;;;;;;AAAJ;;;;;;AAWI;;AAxFR;AAAA;AAAA;AAAA;AAwFI;AAAA;;;AAAuC;;AAvF3C;AAAA;;AAAA;AAAA;AAuFuC;AAAnC;;;;AADF;AAhFF;AAAA;AAAA;AAAA;AAoFqC;;AAA5B;AAAP;AApFF;AAqF4B;;AAA1B;AAnFF;AAoFkC;;AAAhC;AACI;;;;;;;;;;;;;;;AAAJ;;;;;;AAQF;;;AACa;;AArGb;AAAA;;AAAA;AAAA;AAqGS;AAAP;AAhGF;AAAA;AAAA;AAAA;AAiGqC;;AAA5B;AAAP;AArGF;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAuGK;AAGD;;AAAA;;AAAA;AAAA;AADF;AAKA;;AAAA;;;AACE;AAlHJ;AAAA;;AAAA;AAAA;;;;;;;AAkHI;;;AAGO;;;AAHP;AAOF;;AAAA;;;AACE;AA3HJ;AAAA;AAAA;AAAA;;;;;;;AA2HI;;;AAGO;;;AAHP;AAxHJ;AAAA;;AAAA;AAAA;AACA;AA8HE;AAAA;AA3HF;AA4H4B;;AAA1B;AA1HF;AA2HkC;;AAAhC;AAEI;;;;;;;;;;;;;;;;;AAAJ;;AASW;;AA/Ib;AAAA;AAAA;AAAA;AA+IS;AAAA;;AAAA;AAAP;AAxIF;AAAA;AAAA;AAAA;AAyIqC;;AAA5B;AAAP;AA5IF;AAAA;AAAA;AAAA;AA6IS;AAAP;AAEA;AAhJF;AAAA;;AAAA;AAAA;;;;;AAgJE;;;AAGO;;;AAHP;AA5IF;AAkJ4B;;;;;;;;;;;AAA1B;AAhJF;AAiJkC;;AAAhC;AACI;;;;;;;;;;;;;;;;;AAAJ;;AAxJF;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAgKQ;AAAA;;AACH;AA9JL;AAAA;AAAA;AAAA;AADA;AAAA;;AAAA;AAAA;AADA;AAAA;;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AA8JE;;AAAA;;AAAA;;AAAA;;AAAA;AAvKF;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAqLE",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8"
    },
    "6": {
      "op": "bytecblock \"status\" \"releasedAmount\" \"buyer\" \"lastUpdated\" \"seller\" \"completedMilestones\" \"totalAmount\" \"totalMilestones\" \"active\" \"arbiter\" 0x151f7c75 \"milestone_completed\" \"completed\" \"disputed\""
    },
    "162": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "164": {
      "op": "bz main_bare_routing@12",
      "stack_out": []
    },
    "167": {
      "op": "pushbytess 0x06ccdaa3 0x9f2ae373 0x9b3986e7 0x9cc4c446 0x9cdea1bf 0x9f231ea5 0x21d8bed0 // method \"createEscrow(account,account,account,uint64)void\", method \"approveMilestone(uint64)void\", method \"openDispute()void\", method \"resolveDispute(uint64,uint64)void\", method \"cancelAndRefund()void\", method \"getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)\", method \"getParticipants()(address,address,address)\"",
      "defined_out": [
        "Method(approveMilestone(uint64)void)",
        "Method(cancelAndRefund()void)",
        "Method(createEscrow(account,account,account,uint64)void)",
        "Method(getParticipants()(address,address,address))",
        "Method(getStatus()(byte[],uint64,uint64,uint64,uint64,uint64))",
        "Method(openDispute()void)",
        "Method(resolveDispute(uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(createEscrow(account,account,account,uint64)void)",
        "Method(approveMilestone(uint64)void)",
        "Method(openDispute()void)",
        "Method(resolveDispute(uint64,uint64)void)",
        "Method(cancelAndRefund()void)",
        "Method(getStatus()(byte[],uint64,uint64,uint64,uint64,uint64))",
        "Method(getParticipants()(address,address,address))"
      ]
    },
    "204": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(approveMilestone(uint64)void)",
        "Method(cancelAndRefund()void)",
        "Method(createEscrow(account,account,account,uint64)void)",
        "Method(getParticipants()(address,address,address))",
        "Method(getStatus()(byte[],uint64,uint64,uint64,uint64,uint64))",
        "Method(openDispute()void)",
        "Method(resolveDispute(uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createEscrow(account,account,account,uint64)void)",
        "Method(approveMilestone(uint64)void)",
        "Method(openDispute()void)",
        "Method(resolveDispute(uint64,uint64)void)",
        "Method(cancelAndRefund()void)",
        "Method(getStatus()(byte[],uint64,uint64,uint64,uint64,uint64))",
        "Method(getParticipants()(address,address,address))",
        "tmp%2#0"
      ]
    },
    "207": {
      "op": "match main_createEscrow_route@3 main_approveMilestone_route@4 main_openDispute_route@5 main_resolveDispute_route@6 main_cancelAndRefund_route@7 main_getStatus_route@8 main_getParticipants_route@9",
      "stack_out": []
    },
    "223": {
      "block": "main_after_if_else@16",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "224": {
      "op": "return",
      "stack_out": []
    },
    "225": {
      "block": "main_getParticipants_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "227": {
      "op": "!",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "228": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "229": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "231": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "232": {
      "callsub": "smart_contracts/algo_escrow/AlgoEscrowContract.algo.ts::AlgoEscrowContract.getParticipants",
      "op": "callsub getParticipants",
      "defined_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0"
      ]
    },
    "235": {
      "op": "cover 2",
      "stack_out": [
        "elements_to_encode%8#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0"
      ]
    },
    "237": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "elements_to_encode%8#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "238": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "elements_to_encode%8#0"
      ]
    },
    "239": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0"
      ]
    },
    "240": {
      "op": "bytec 10 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%11#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "0x151f7c75"
      ]
    },
    "242": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "243": {
      "op": "concat",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "244": {
      "op": "log",
      "stack_out": []
    },
    "245": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "246": {
      "op": "return",
      "stack_out": []
    },
    "247": {
      "block": "main_getStatus_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "249": {
      "op": "!",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "250": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "251": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "253": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "254": {
      "callsub": "smart_contracts/algo_escrow/AlgoEscrowContract.algo.ts::AlgoEscrowContract.getStatus",
      "op": "callsub getStatus",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ]
    },
    "257": {
      "op": "dig 5",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%0#0 (copy)",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%0#0 (copy)"
      ]
    },
    "259": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length%0#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length%0#0"
      ]
    },
    "260": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "as_bytes%0#0"
      ]
    },
    "261": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length_uint16%0#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length_uint16%0#0"
      ]
    },
    "264": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "length_uint16%0#0",
        "elements_to_encode%0#0"
      ]
    },
    "266": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0"
      ]
    },
    "267": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "269": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "270": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "elements_to_encode%2#0"
      ]
    },
    "272": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "273": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "elements_to_encode%3#0"
      ]
    },
    "275": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "276": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "elements_to_encode%4#0"
      ]
    },
    "278": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "279": {
      "op": "uncover 5",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "elements_to_encode%5#0"
      ]
    },
    "281": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "282": {
      "op": "pushbytes 0x002a",
      "defined_out": [
        "0x002a",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "0x002a"
      ]
    },
    "286": {
      "op": "uncover 5",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "0x002a",
        "val_as_bytes%0#0"
      ]
    },
    "288": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "289": {
      "op": "uncover 4",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%1#0"
      ]
    },
    "291": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "292": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "294": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "295": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "297": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%4#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "298": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%4#0"
      ]
    },
    "299": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "300": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0"
      ]
    },
    "301": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0"
      ]
    },
    "302": {
      "op": "bytec 10 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%7#0",
        "0x151f7c75"
      ]
    },
    "304": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "305": {
      "op": "concat",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "306": {
      "op": "log",
      "stack_out": []
    },
    "307": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "308": {
      "op": "return",
      "stack_out": []
    },
    "309": {
      "block": "main_cancelAndRefund_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "311": {
      "op": "!",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "312": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "313": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "315": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "316": {
      "callsub": "smart_contracts/algo_escrow/AlgoEscrowContract.algo.ts::AlgoEscrowContract.cancelAndRefund",
      "op": "callsub cancelAndRefund"
    },
    "319": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "320": {
      "op": "return",
      "stack_out": []
    },
    "321": {
      "block": "main_resolveDispute_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "323": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "324": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "325": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "327": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "328": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "331": {
      "op": "dup",
      "defined_out": [
        "tmp%32#0",
        "tmp%32#0 (copy)"
      ],
      "stack_out": [
        "tmp%32#0",
        "tmp%32#0 (copy)"
      ]
    },
    "332": {
      "op": "len",
      "defined_out": [
        "tmp%32#0",
        "value_len%5#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "value_len%5#0"
      ]
    },
    "333": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "tmp%32#0",
        "value_len%5#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "value_len%5#0",
        "8"
      ]
    },
    "334": {
      "op": "==",
      "defined_out": [
        "size_is_correct%5#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0",
        "size_is_correct%5#0"
      ]
    },
    "335": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "336": {
      "op": "btoi",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "337": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "340": {
      "op": "dup",
      "defined_out": [
        "tmp%33#0",
        "tmp%34#0",
        "tmp%34#0 (copy)"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%34#0",
        "tmp%34#0 (copy)"
      ]
    },
    "341": {
      "op": "len",
      "defined_out": [
        "tmp%33#0",
        "tmp%34#0",
        "value_len%6#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%34#0",
        "value_len%6#0"
      ]
    },
    "342": {
      "op": "intc_2 // 8",
      "stack_out": [
        "tmp%33#0",
        "tmp%34#0",
        "value_len%6#0",
        "8"
      ]
    },
    "343": {
      "op": "==",
      "defined_out": [
        "size_is_correct%6#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%34#0",
        "size_is_correct%6#0"
      ]
    },
    "344": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "345": {
      "op": "btoi",
      "defined_out": [
        "tmp%33#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%35#0"
      ]
    },
    "346": {
      "callsub": "smart_contracts/algo_escrow/AlgoEscrowContract.algo.ts::AlgoEscrowContract.resolveDispute",
      "op": "callsub resolveDispute",
      "stack_out": []
    },
    "349": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "350": {
      "op": "return",
      "stack_out": []
    },
    "351": {
      "block": "main_openDispute_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "353": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "354": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "355": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "357": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "358": {
      "callsub": "smart_contracts/algo_escrow/AlgoEscrowContract.algo.ts::AlgoEscrowContract.openDispute",
      "op": "callsub openDispute"
    },
    "361": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "362": {
      "op": "return",
      "stack_out": []
    },
    "363": {
      "block": "main_approveMilestone_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "365": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "366": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "367": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "369": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "370": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "373": {
      "op": "dup",
      "defined_out": [
        "tmp%22#0",
        "tmp%22#0 (copy)"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%22#0 (copy)"
      ]
    },
    "374": {
      "op": "len",
      "defined_out": [
        "tmp%22#0",
        "value_len%4#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "value_len%4#0"
      ]
    },
    "375": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "tmp%22#0",
        "value_len%4#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "value_len%4#0",
        "8"
      ]
    },
    "376": {
      "op": "==",
      "defined_out": [
        "size_is_correct%4#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "size_is_correct%4#0"
      ]
    },
    "377": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "378": {
      "op": "btoi",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "379": {
      "callsub": "smart_contracts/algo_escrow/AlgoEscrowContract.algo.ts::AlgoEscrowContract.approveMilestone",
      "op": "callsub approveMilestone",
      "stack_out": []
    },
    "382": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "383": {
      "op": "return",
      "stack_out": []
    },
    "384": {
      "block": "main_createEscrow_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "386": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "387": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "388": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "390": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "391": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "394": {
      "op": "dup",
      "defined_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "395": {
      "op": "len",
      "defined_out": [
        "tmp%7#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "value_len%0#0"
      ]
    },
    "396": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%7#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "value_len%0#0",
        "1"
      ]
    },
    "397": {
      "op": "==",
      "defined_out": [
        "size_is_correct%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "size_is_correct%0#0"
      ]
    },
    "398": {
      "error": "invalid number of bytes for arc4.uint8",
      "op": "assert // invalid number of bytes for arc4.uint8",
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "399": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "400": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "402": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "405": {
      "op": "dup",
      "defined_out": [
        "tmp%10#0",
        "tmp%10#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "tmp%10#0 (copy)"
      ]
    },
    "406": {
      "op": "len",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0",
        "value_len%1#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "value_len%1#0"
      ]
    },
    "407": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "value_len%1#0",
        "1"
      ]
    },
    "408": {
      "op": "==",
      "defined_out": [
        "size_is_correct%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0",
        "size_is_correct%1#0"
      ]
    },
    "409": {
      "error": "invalid number of bytes for arc4.uint8",
      "op": "assert // invalid number of bytes for arc4.uint8",
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "410": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "411": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%12#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0"
      ]
    },
    "413": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "416": {
      "op": "dup",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%13#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%13#0 (copy)"
      ]
    },
    "417": {
      "op": "len",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%9#0",
        "value_len%2#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0",
        "tmp%13#0",
        "value_len%2#0"
      ]
    },
    "418": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0",
        "tmp%13#0",
        "value_len%2#0",
        "1"
      ]
    },
    "419": {
      "op": "==",
      "defined_out": [
        "size_is_correct%2#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0",
        "tmp%13#0",
        "size_is_correct%2#0"
      ]
    },
    "420": {
      "error": "invalid number of bytes for arc4.uint8",
      "op": "assert // invalid number of bytes for arc4.uint8",
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "421": {
      "op": "btoi",
      "defined_out": [
        "tmp%12#0",
        "tmp%14#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0",
        "tmp%14#0"
      ]
    },
    "422": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%12#0",
        "tmp%15#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0",
        "tmp%15#0"
      ]
    },
    "424": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "427": {
      "op": "dup",
      "defined_out": [
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%16#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%16#0 (copy)"
      ]
    },
    "428": {
      "op": "len",
      "defined_out": [
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%9#0",
        "value_len%3#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "value_len%3#0"
      ]
    },
    "429": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%9#0",
        "value_len%3#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "value_len%3#0",
        "8"
      ]
    },
    "430": {
      "op": "==",
      "defined_out": [
        "size_is_correct%3#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0",
        "size_is_correct%3#0"
      ]
    },
    "431": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "432": {
      "op": "btoi",
      "defined_out": [
        "tmp%12#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0",
        "tmp%15#0",
        "tmp%17#0"
      ]
    },
    "433": {
      "callsub": "smart_contracts/algo_escrow/AlgoEscrowContract.algo.ts::AlgoEscrowContract.createEscrow",
      "op": "callsub createEscrow",
      "stack_out": []
    },
    "436": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "437": {
      "op": "return",
      "stack_out": []
    },
    "438": {
      "block": "main_bare_routing@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "440": {
      "op": "bnz main_after_if_else@16",
      "stack_out": []
    },
    "443": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "445": {
      "op": "!",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "446": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "447": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "448": {
      "op": "return",
      "stack_out": []
    },
    "449": {
      "subroutine": "smart_contracts/algo_escrow/AlgoEscrowContract.algo.ts::AlgoEscrowContract.createEscrow",
      "params": {
        "buyer#0": "bytes",
        "seller#0": "bytes",
        "arbiter#0": "bytes",
        "totalMilestones#0": "uint64"
      },
      "block": "createEscrow",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "452": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "454": {
      "op": "frame_dig -4",
      "defined_out": [
        "buyer#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "buyer#0 (copy)"
      ]
    },
    "456": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "457": {
      "error": "Only buyer can create escrow",
      "op": "assert // Only buyer can create escrow",
      "stack_out": []
    },
    "458": {
      "op": "frame_dig -1",
      "defined_out": [
        "totalMilestones#0 (copy)"
      ],
      "stack_out": [
        "totalMilestones#0 (copy)"
      ]
    },
    "460": {
      "error": "Must have milestones",
      "op": "assert // Must have milestones",
      "stack_out": []
    },
    "461": {
      "op": "bytec_2 // \"buyer\"",
      "defined_out": [
        "\"buyer\""
      ],
      "stack_out": [
        "\"buyer\""
      ]
    },
    "462": {
      "op": "frame_dig -4",
      "stack_out": [
        "\"buyer\"",
        "buyer#0 (copy)"
      ]
    },
    "464": {
      "op": "app_global_put",
      "stack_out": []
    },
    "465": {
      "op": "bytec 4 // \"seller\"",
      "defined_out": [
        "\"seller\""
      ],
      "stack_out": [
        "\"seller\""
      ]
    },
    "467": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"seller\"",
        "seller#0 (copy)"
      ],
      "stack_out": [
        "\"seller\"",
        "seller#0 (copy)"
      ]
    },
    "469": {
      "op": "app_global_put",
      "stack_out": []
    },
    "470": {
      "op": "bytec 9 // \"arbiter\"",
      "defined_out": [
        "\"arbiter\""
      ],
      "stack_out": [
        "\"arbiter\""
      ]
    },
    "472": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"arbiter\"",
        "arbiter#0 (copy)"
      ],
      "stack_out": [
        "\"arbiter\"",
        "arbiter#0 (copy)"
      ]
    },
    "474": {
      "op": "app_global_put",
      "stack_out": []
    },
    "475": {
      "op": "bytec 7 // \"totalMilestones\"",
      "defined_out": [
        "\"totalMilestones\""
      ],
      "stack_out": [
        "\"totalMilestones\""
      ]
    },
    "477": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"totalMilestones\"",
        "totalMilestones#0 (copy)"
      ]
    },
    "479": {
      "op": "app_global_put",
      "stack_out": []
    },
    "480": {
      "op": "bytec 5 // \"completedMilestones\"",
      "defined_out": [
        "\"completedMilestones\""
      ],
      "stack_out": [
        "\"completedMilestones\""
      ]
    },
    "482": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"completedMilestones\"",
        "0"
      ],
      "stack_out": [
        "\"completedMilestones\"",
        "0"
      ]
    },
    "483": {
      "op": "app_global_put",
      "stack_out": []
    },
    "484": {
      "op": "bytec_1 // \"releasedAmount\"",
      "defined_out": [
        "\"releasedAmount\""
      ],
      "stack_out": [
        "\"releasedAmount\""
      ]
    },
    "485": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"releasedAmount\"",
        "0"
      ]
    },
    "486": {
      "op": "app_global_put",
      "stack_out": []
    },
    "487": {
      "op": "bytec_0 // \"status\"",
      "defined_out": [
        "\"status\""
      ],
      "stack_out": [
        "\"status\""
      ]
    },
    "488": {
      "op": "bytec 8 // \"active\"",
      "defined_out": [
        "\"active\"",
        "\"status\""
      ],
      "stack_out": [
        "\"status\"",
        "\"active\""
      ]
    },
    "490": {
      "op": "app_global_put",
      "stack_out": []
    },
    "491": {
      "op": "pushbytes \"createdAt\"",
      "defined_out": [
        "\"createdAt\""
      ],
      "stack_out": [
        "\"createdAt\""
      ]
    },
    "502": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"createdAt\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"createdAt\"",
        "materialized_values%0#0"
      ]
    },
    "504": {
      "op": "app_global_put",
      "stack_out": []
    },
    "505": {
      "op": "bytec_3 // \"lastUpdated\"",
      "defined_out": [
        "\"lastUpdated\""
      ],
      "stack_out": [
        "\"lastUpdated\""
      ]
    },
    "506": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"lastUpdated\"",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "\"lastUpdated\"",
        "materialized_values%1#0"
      ]
    },
    "508": {
      "op": "app_global_put",
      "stack_out": []
    },
    "509": {
      "op": "pushbytes \"EscrowCreated\"",
      "defined_out": [
        "\"EscrowCreated\""
      ],
      "stack_out": [
        "\"EscrowCreated\""
      ]
    },
    "524": {
      "op": "log",
      "stack_out": []
    },
    "525": {
      "retsub": true,
      "op": "retsub"
    },
    "526": {
      "subroutine": "smart_contracts/algo_escrow/AlgoEscrowContract.algo.ts::AlgoEscrowContract.approveMilestone",
      "params": {
        "milestoneIndex#0": "uint64"
      },
      "block": "approveMilestone",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "529": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "531": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "532": {
      "op": "bytec_2 // \"buyer\"",
      "defined_out": [
        "\"buyer\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"buyer\""
      ]
    },
    "533": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "534": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "535": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "536": {
      "error": "Only buyer can approve milestone",
      "op": "assert // Only buyer can approve milestone",
      "stack_out": []
    },
    "537": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "538": {
      "op": "bytec_0 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"status\""
      ]
    },
    "539": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "540": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "541": {
      "op": "bytec 8 // \"active\"",
      "defined_out": [
        "\"active\"",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "\"active\""
      ]
    },
    "543": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "544": {
      "op": "bnz approveMilestone_bool_true@2",
      "stack_out": []
    },
    "547": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "548": {
      "op": "bytec_0 // \"status\"",
      "stack_out": [
        "0",
        "\"status\""
      ]
    },
    "549": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "550": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "551": {
      "op": "bytec 11 // \"milestone_completed\"",
      "defined_out": [
        "\"milestone_completed\"",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "\"milestone_completed\""
      ]
    },
    "553": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "554": {
      "op": "bz approveMilestone_bool_false@3",
      "stack_out": []
    },
    "557": {
      "block": "approveMilestone_bool_true@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "558": {
      "block": "approveMilestone_bool_merge@4",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "Invalid status",
      "op": "assert // Invalid status",
      "defined_out": [],
      "stack_out": []
    },
    "559": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "560": {
      "op": "bytec 5 // \"completedMilestones\"",
      "defined_out": [
        "\"completedMilestones\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"completedMilestones\""
      ]
    },
    "562": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "563": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "564": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%3#0",
        "milestoneIndex#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "milestoneIndex#0 (copy)"
      ]
    },
    "566": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)",
        "milestoneIndex#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "milestoneIndex#0 (copy)",
        "maybe_value%3#0 (copy)"
      ]
    },
    "568": {
      "op": "==",
      "defined_out": [
        "maybe_value%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "tmp%4#0"
      ]
    },
    "569": {
      "error": "Wrong milestone index",
      "op": "assert // Wrong milestone index",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "570": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%3#0",
        "0"
      ]
    },
    "571": {
      "op": "bytec 7 // \"totalMilestones\"",
      "defined_out": [
        "\"totalMilestones\"",
        "0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "0",
        "\"totalMilestones\""
      ]
    },
    "573": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%3#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "574": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%5#0"
      ]
    },
    "575": {
      "op": "dup2",
      "defined_out": [
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)",
        "maybe_value%5#0",
        "maybe_value%5#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%5#0",
        "maybe_value%3#0 (copy)",
        "maybe_value%5#0 (copy)"
      ]
    },
    "576": {
      "op": "<",
      "defined_out": [
        "maybe_value%3#0",
        "maybe_value%5#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%5#0",
        "tmp%5#0"
      ]
    },
    "577": {
      "error": "All milestones done",
      "op": "assert // All milestones done",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%5#0"
      ]
    },
    "578": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%5#0",
        "0"
      ]
    },
    "579": {
      "op": "bytec 6 // \"totalAmount\"",
      "defined_out": [
        "\"totalAmount\"",
        "0",
        "maybe_value%3#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%5#0",
        "0",
        "\"totalAmount\""
      ]
    },
    "581": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%3#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "582": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ]
    },
    "583": {
      "op": "swap",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%6#0",
        "maybe_value%5#0"
      ]
    },
    "584": {
      "op": "/",
      "defined_out": [
        "maybe_value%3#0",
        "paymentAmount#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "paymentAmount#0"
      ]
    },
    "585": {
      "op": "itxn_begin"
    },
    "586": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%3#0",
        "paymentAmount#0",
        "0"
      ]
    },
    "587": {
      "op": "bytec 4 // \"seller\"",
      "defined_out": [
        "\"seller\"",
        "0",
        "maybe_value%3#0",
        "paymentAmount#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "paymentAmount#0",
        "0",
        "\"seller\""
      ]
    },
    "589": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%3#0",
        "maybe_value%8#0",
        "paymentAmount#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "paymentAmount#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "590": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0",
        "paymentAmount#0",
        "maybe_value%8#0"
      ]
    },
    "591": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%3#0",
        "maybe_value%8#0",
        "paymentAmount#0",
        "paymentAmount#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "paymentAmount#0",
        "maybe_value%8#0",
        "paymentAmount#0 (copy)"
      ]
    },
    "593": {
      "op": "itxn_field Amount",
      "stack_out": [
        "maybe_value%3#0",
        "paymentAmount#0",
        "maybe_value%8#0"
      ]
    },
    "595": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "maybe_value%3#0",
        "paymentAmount#0"
      ]
    },
    "597": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0",
        "paymentAmount#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "paymentAmount#0",
        "1"
      ]
    },
    "598": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "maybe_value%3#0",
        "paymentAmount#0"
      ]
    },
    "600": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%3#0",
        "paymentAmount#0",
        "0"
      ]
    },
    "601": {
      "op": "itxn_field Fee",
      "stack_out": [
        "maybe_value%3#0",
        "paymentAmount#0"
      ]
    },
    "603": {
      "op": "itxn_submit"
    },
    "604": {
      "op": "swap",
      "stack_out": [
        "paymentAmount#0",
        "maybe_value%3#0"
      ]
    },
    "605": {
      "op": "intc_1 // 1",
      "stack_out": [
        "paymentAmount#0",
        "maybe_value%3#0",
        "1"
      ]
    },
    "606": {
      "op": "+",
      "defined_out": [
        "materialized_values%0#0",
        "paymentAmount#0"
      ],
      "stack_out": [
        "paymentAmount#0",
        "materialized_values%0#0"
      ]
    },
    "607": {
      "op": "bytec 5 // \"completedMilestones\"",
      "stack_out": [
        "paymentAmount#0",
        "materialized_values%0#0",
        "\"completedMilestones\""
      ]
    },
    "609": {
      "op": "swap",
      "stack_out": [
        "paymentAmount#0",
        "\"completedMilestones\"",
        "materialized_values%0#0"
      ]
    },
    "610": {
      "op": "app_global_put",
      "stack_out": [
        "paymentAmount#0"
      ]
    },
    "611": {
      "op": "intc_0 // 0",
      "stack_out": [
        "paymentAmount#0",
        "0"
      ]
    },
    "612": {
      "op": "bytec_1 // \"releasedAmount\"",
      "defined_out": [
        "\"releasedAmount\"",
        "0",
        "paymentAmount#0"
      ],
      "stack_out": [
        "paymentAmount#0",
        "0",
        "\"releasedAmount\""
      ]
    },
    "613": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%10#0",
        "maybe_value%10#0",
        "paymentAmount#0"
      ],
      "stack_out": [
        "paymentAmount#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "614": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "paymentAmount#0",
        "maybe_value%10#0"
      ]
    },
    "615": {
      "op": "+",
      "defined_out": [
        "materialized_values%1#0"
      ],
      "stack_out": [
        "materialized_values%1#0"
      ]
    },
    "616": {
      "op": "bytec_1 // \"releasedAmount\"",
      "stack_out": [
        "materialized_values%1#0",
        "\"releasedAmount\""
      ]
    },
    "617": {
      "op": "swap",
      "stack_out": [
        "\"releasedAmount\"",
        "materialized_values%1#0"
      ]
    },
    "618": {
      "op": "app_global_put",
      "stack_out": []
    },
    "619": {
      "op": "bytec_3 // \"lastUpdated\"",
      "defined_out": [
        "\"lastUpdated\""
      ],
      "stack_out": [
        "\"lastUpdated\""
      ]
    },
    "620": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"lastUpdated\"",
        "materialized_values%2#0"
      ],
      "stack_out": [
        "\"lastUpdated\"",
        "materialized_values%2#0"
      ]
    },
    "622": {
      "op": "app_global_put",
      "stack_out": []
    },
    "623": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "624": {
      "op": "bytec 5 // \"completedMilestones\"",
      "stack_out": [
        "0",
        "\"completedMilestones\""
      ]
    },
    "626": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%11#0",
        "maybe_value%11#0"
      ],
      "stack_out": [
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "627": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%11#0"
      ]
    },
    "628": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%11#0",
        "0"
      ]
    },
    "629": {
      "op": "bytec 7 // \"totalMilestones\"",
      "stack_out": [
        "maybe_value%11#0",
        "0",
        "\"totalMilestones\""
      ]
    },
    "631": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%12#0",
        "maybe_value%11#0",
        "maybe_value%12#0"
      ],
      "stack_out": [
        "maybe_value%11#0",
        "maybe_value%12#0",
        "maybe_exists%12#0"
      ]
    },
    "632": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%11#0",
        "maybe_value%12#0"
      ]
    },
    "633": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "634": {
      "op": "bz approveMilestone_else_body@7",
      "stack_out": []
    },
    "637": {
      "op": "bytec_0 // \"status\"",
      "defined_out": [
        "\"status\""
      ],
      "stack_out": [
        "\"status\""
      ]
    },
    "638": {
      "op": "bytec 12 // \"completed\"",
      "defined_out": [
        "\"completed\"",
        "\"status\""
      ],
      "stack_out": [
        "\"status\"",
        "\"completed\""
      ]
    },
    "640": {
      "op": "app_global_put",
      "stack_out": []
    },
    "641": {
      "op": "pushbytes \"EscrowCompleted\"",
      "defined_out": [
        "\"EscrowCompleted\""
      ],
      "stack_out": [
        "\"EscrowCompleted\""
      ]
    },
    "658": {
      "op": "log",
      "stack_out": []
    },
    "659": {
      "retsub": true,
      "op": "retsub"
    },
    "660": {
      "block": "approveMilestone_else_body@7",
      "stack_in": [],
      "op": "bytec_0 // \"status\"",
      "defined_out": [
        "\"status\""
      ],
      "stack_out": [
        "\"status\""
      ]
    },
    "661": {
      "op": "bytec 11 // \"milestone_completed\"",
      "defined_out": [
        "\"milestone_completed\"",
        "\"status\""
      ],
      "stack_out": [
        "\"status\"",
        "\"milestone_completed\""
      ]
    },
    "663": {
      "op": "app_global_put",
      "stack_out": []
    },
    "664": {
      "op": "pushbytes \"MilestoneApproved\"",
      "defined_out": [
        "\"MilestoneApproved\""
      ],
      "stack_out": [
        "\"MilestoneApproved\""
      ]
    },
    "683": {
      "op": "log",
      "stack_out": []
    },
    "684": {
      "retsub": true,
      "op": "retsub"
    },
    "685": {
      "block": "approveMilestone_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "686": {
      "op": "b approveMilestone_bool_merge@4"
    },
    "689": {
      "subroutine": "smart_contracts/algo_escrow/AlgoEscrowContract.algo.ts::AlgoEscrowContract.openDispute",
      "params": {},
      "block": "openDispute",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "691": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "692": {
      "op": "bytec_2 // \"buyer\"",
      "defined_out": [
        "\"buyer\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"buyer\""
      ]
    },
    "693": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "694": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "695": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "696": {
      "op": "bnz openDispute_bool_true@2",
      "stack_out": []
    },
    "699": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "701": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "702": {
      "op": "bytec 4 // \"seller\"",
      "defined_out": [
        "\"seller\"",
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"seller\""
      ]
    },
    "704": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "705": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "706": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "707": {
      "op": "bz openDispute_bool_false@3",
      "stack_out": []
    },
    "710": {
      "block": "openDispute_bool_true@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "711": {
      "block": "openDispute_bool_merge@4",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "Only participants can dispute",
      "op": "assert // Only participants can dispute",
      "defined_out": [],
      "stack_out": []
    },
    "712": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "713": {
      "op": "bytec_0 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"status\""
      ]
    },
    "714": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "715": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "716": {
      "op": "bytec 8 // \"active\"",
      "defined_out": [
        "\"active\"",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "\"active\""
      ]
    },
    "718": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "719": {
      "error": "Can dispute only active",
      "op": "assert // Can dispute only active",
      "stack_out": []
    },
    "720": {
      "op": "bytec_0 // \"status\"",
      "stack_out": [
        "\"status\""
      ]
    },
    "721": {
      "op": "bytec 13 // \"disputed\"",
      "defined_out": [
        "\"disputed\"",
        "\"status\""
      ],
      "stack_out": [
        "\"status\"",
        "\"disputed\""
      ]
    },
    "723": {
      "op": "app_global_put",
      "stack_out": []
    },
    "724": {
      "op": "bytec_3 // \"lastUpdated\"",
      "defined_out": [
        "\"lastUpdated\""
      ],
      "stack_out": [
        "\"lastUpdated\""
      ]
    },
    "725": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"lastUpdated\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"lastUpdated\"",
        "materialized_values%0#0"
      ]
    },
    "727": {
      "op": "app_global_put",
      "stack_out": []
    },
    "728": {
      "op": "pushbytes \"DisputeOpened\"",
      "defined_out": [
        "\"DisputeOpened\""
      ],
      "stack_out": [
        "\"DisputeOpened\""
      ]
    },
    "743": {
      "op": "log",
      "stack_out": []
    },
    "744": {
      "retsub": true,
      "op": "retsub"
    },
    "745": {
      "block": "openDispute_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "746": {
      "op": "b openDispute_bool_merge@4"
    },
    "749": {
      "subroutine": "smart_contracts/algo_escrow/AlgoEscrowContract.algo.ts::AlgoEscrowContract.resolveDispute",
      "params": {
        "releaseToSeller#0": "uint64",
        "refundToBuyer#0": "uint64"
      },
      "block": "resolveDispute",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "752": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "754": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "755": {
      "op": "bytec 9 // \"arbiter\"",
      "defined_out": [
        "\"arbiter\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arbiter\""
      ]
    },
    "757": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "758": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "759": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "760": {
      "error": "Only arbiter can resolve",
      "op": "assert // Only arbiter can resolve",
      "stack_out": []
    },
    "761": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "762": {
      "op": "bytec_0 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"status\""
      ]
    },
    "763": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "764": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "765": {
      "op": "bytec 13 // \"disputed\"",
      "defined_out": [
        "\"disputed\"",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "\"disputed\""
      ]
    },
    "767": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "768": {
      "error": "No dispute to resolve",
      "op": "assert // No dispute to resolve",
      "stack_out": []
    },
    "769": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "770": {
      "op": "bytec 6 // \"totalAmount\"",
      "defined_out": [
        "\"totalAmount\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalAmount\""
      ]
    },
    "772": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "773": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "774": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "775": {
      "op": "bytec_1 // \"releasedAmount\"",
      "defined_out": [
        "\"releasedAmount\"",
        "0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "0",
        "\"releasedAmount\""
      ]
    },
    "776": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "777": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "778": {
      "op": "-",
      "defined_out": [
        "remaining#0"
      ],
      "stack_out": [
        "remaining#0"
      ]
    },
    "779": {
      "op": "frame_dig -2",
      "defined_out": [
        "releaseToSeller#0 (copy)",
        "remaining#0"
      ],
      "stack_out": [
        "remaining#0",
        "releaseToSeller#0 (copy)"
      ]
    },
    "781": {
      "op": "frame_dig -1",
      "defined_out": [
        "refundToBuyer#0 (copy)",
        "releaseToSeller#0 (copy)",
        "remaining#0"
      ],
      "stack_out": [
        "remaining#0",
        "releaseToSeller#0 (copy)",
        "refundToBuyer#0 (copy)"
      ]
    },
    "783": {
      "op": "+",
      "defined_out": [
        "remaining#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "remaining#0",
        "tmp%3#0"
      ]
    },
    "784": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "785": {
      "error": "Amounts must balance",
      "op": "assert // Amounts must balance",
      "stack_out": []
    },
    "786": {
      "op": "frame_dig -2",
      "stack_out": [
        "releaseToSeller#0 (copy)"
      ]
    },
    "788": {
      "op": "bz resolveDispute_after_if_else@3",
      "stack_out": []
    },
    "791": {
      "op": "itxn_begin"
    },
    "792": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "793": {
      "op": "bytec 4 // \"seller\"",
      "defined_out": [
        "\"seller\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"seller\""
      ]
    },
    "795": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "796": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "797": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%4#0",
        "releaseToSeller#0 (copy)"
      ]
    },
    "799": {
      "op": "itxn_field Amount",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "801": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "803": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "804": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "806": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "807": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "809": {
      "op": "itxn_submit"
    },
    "810": {
      "block": "resolveDispute_after_if_else@3",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "refundToBuyer#0 (copy)"
      ],
      "stack_out": [
        "refundToBuyer#0 (copy)"
      ]
    },
    "812": {
      "op": "bz resolveDispute_after_if_else@6",
      "stack_out": []
    },
    "815": {
      "op": "itxn_begin"
    },
    "816": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "817": {
      "op": "bytec_2 // \"buyer\"",
      "defined_out": [
        "\"buyer\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"buyer\""
      ]
    },
    "818": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "819": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "820": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%5#0",
        "refundToBuyer#0 (copy)"
      ]
    },
    "822": {
      "op": "itxn_field Amount",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "824": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "826": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "827": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "829": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "830": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "832": {
      "op": "itxn_submit"
    },
    "833": {
      "block": "resolveDispute_after_if_else@6",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "834": {
      "op": "bytec 6 // \"totalAmount\"",
      "defined_out": [
        "\"totalAmount\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalAmount\""
      ]
    },
    "836": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "837": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%6#0"
      ]
    },
    "838": {
      "op": "bytec_1 // \"releasedAmount\"",
      "defined_out": [
        "\"releasedAmount\"",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "\"releasedAmount\""
      ]
    },
    "839": {
      "op": "swap",
      "stack_out": [
        "\"releasedAmount\"",
        "maybe_value%6#0"
      ]
    },
    "840": {
      "op": "app_global_put",
      "stack_out": []
    },
    "841": {
      "op": "bytec_0 // \"status\"",
      "defined_out": [
        "\"status\""
      ],
      "stack_out": [
        "\"status\""
      ]
    },
    "842": {
      "op": "bytec 12 // \"completed\"",
      "defined_out": [
        "\"completed\"",
        "\"status\""
      ],
      "stack_out": [
        "\"status\"",
        "\"completed\""
      ]
    },
    "844": {
      "op": "app_global_put",
      "stack_out": []
    },
    "845": {
      "op": "bytec_3 // \"lastUpdated\"",
      "defined_out": [
        "\"lastUpdated\""
      ],
      "stack_out": [
        "\"lastUpdated\""
      ]
    },
    "846": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"lastUpdated\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"lastUpdated\"",
        "materialized_values%0#0"
      ]
    },
    "848": {
      "op": "app_global_put",
      "stack_out": []
    },
    "849": {
      "op": "pushbytes \"DisputeResolved\"",
      "defined_out": [
        "\"DisputeResolved\""
      ],
      "stack_out": [
        "\"DisputeResolved\""
      ]
    },
    "866": {
      "op": "log",
      "stack_out": []
    },
    "867": {
      "retsub": true,
      "op": "retsub"
    },
    "868": {
      "subroutine": "smart_contracts/algo_escrow/AlgoEscrowContract.algo.ts::AlgoEscrowContract.cancelAndRefund",
      "params": {},
      "block": "cancelAndRefund",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "870": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "871": {
      "op": "bytec_2 // \"buyer\"",
      "defined_out": [
        "\"buyer\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"buyer\""
      ]
    },
    "872": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "873": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "874": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "875": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "877": {
      "op": "==",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%1#0"
      ]
    },
    "878": {
      "error": "Only buyer can cancel",
      "op": "assert // Only buyer can cancel",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "879": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "880": {
      "op": "bytec_0 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"status\""
      ]
    },
    "881": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "882": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "883": {
      "op": "bytec 8 // \"active\"",
      "defined_out": [
        "\"active\"",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "\"active\""
      ]
    },
    "885": {
      "op": "==",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%2#0"
      ]
    },
    "886": {
      "error": "Not active escrow",
      "op": "assert // Not active escrow",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "887": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "888": {
      "op": "bytec_1 // \"releasedAmount\"",
      "defined_out": [
        "\"releasedAmount\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"releasedAmount\""
      ]
    },
    "889": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "890": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%2#0"
      ]
    },
    "891": {
      "op": "!",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%3#0"
      ]
    },
    "892": {
      "error": "Funds already released",
      "op": "assert // Funds already released",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "893": {
      "op": "itxn_begin"
    },
    "894": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "895": {
      "op": "bytec 6 // \"totalAmount\"",
      "defined_out": [
        "\"totalAmount\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"totalAmount\""
      ]
    },
    "897": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%0#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "898": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%4#0"
      ]
    },
    "899": {
      "op": "itxn_field Amount",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "901": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "903": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "904": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "906": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "907": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "909": {
      "op": "itxn_submit"
    },
    "910": {
      "op": "bytec_0 // \"status\"",
      "stack_out": [
        "\"status\""
      ]
    },
    "911": {
      "op": "pushbytes \"cancelled\"",
      "defined_out": [
        "\"cancelled\"",
        "\"status\""
      ],
      "stack_out": [
        "\"status\"",
        "\"cancelled\""
      ]
    },
    "922": {
      "op": "app_global_put",
      "stack_out": []
    },
    "923": {
      "op": "bytec_3 // \"lastUpdated\"",
      "defined_out": [
        "\"lastUpdated\""
      ],
      "stack_out": [
        "\"lastUpdated\""
      ]
    },
    "924": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"lastUpdated\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"lastUpdated\"",
        "materialized_values%0#0"
      ]
    },
    "926": {
      "op": "app_global_put",
      "stack_out": []
    },
    "927": {
      "op": "pushbytes \"EscrowCancelled\"",
      "defined_out": [
        "\"EscrowCancelled\""
      ],
      "stack_out": [
        "\"EscrowCancelled\""
      ]
    },
    "944": {
      "op": "log",
      "stack_out": []
    },
    "945": {
      "retsub": true,
      "op": "retsub"
    },
    "946": {
      "subroutine": "smart_contracts/algo_escrow/AlgoEscrowContract.algo.ts::AlgoEscrowContract.getStatus",
      "params": {},
      "block": "getStatus",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "947": {
      "op": "bytec 6 // \"totalAmount\"",
      "defined_out": [
        "\"totalAmount\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalAmount\""
      ]
    },
    "949": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "950": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "951": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "952": {
      "op": "bytec_1 // \"releasedAmount\"",
      "defined_out": [
        "\"releasedAmount\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"releasedAmount\""
      ]
    },
    "953": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "954": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "955": {
      "op": "swap",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%0#0"
      ]
    },
    "956": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "958": {
      "op": "-",
      "defined_out": [
        "maybe_value%1#0",
        "remaining#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "remaining#0"
      ]
    },
    "959": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "remaining#0",
        "0"
      ]
    },
    "960": {
      "op": "bytec_0 // \"status\"",
      "defined_out": [
        "\"status\"",
        "0",
        "maybe_value%1#0",
        "remaining#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "remaining#0",
        "0",
        "\"status\""
      ]
    },
    "961": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "remaining#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "remaining#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "962": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0",
        "remaining#0",
        "maybe_value%2#0"
      ]
    },
    "963": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "remaining#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "964": {
      "op": "bytec 5 // \"completedMilestones\"",
      "defined_out": [
        "\"completedMilestones\"",
        "0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "remaining#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "remaining#0",
        "maybe_value%2#0",
        "0",
        "\"completedMilestones\""
      ]
    },
    "966": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "remaining#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "remaining#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "967": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0",
        "remaining#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "968": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "remaining#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "969": {
      "op": "bytec 7 // \"totalMilestones\"",
      "defined_out": [
        "\"totalMilestones\"",
        "0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "remaining#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "remaining#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0",
        "\"totalMilestones\""
      ]
    },
    "971": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "remaining#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "remaining#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "972": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0",
        "remaining#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "973": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "remaining#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "974": {
      "op": "bytec_3 // \"lastUpdated\"",
      "defined_out": [
        "\"lastUpdated\"",
        "0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "remaining#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "remaining#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0",
        "\"lastUpdated\""
      ]
    },
    "975": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%6#0",
        "remaining#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "remaining#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "976": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0",
        "remaining#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%6#0"
      ]
    },
    "977": {
      "op": "cover 3",
      "stack_out": [
        "maybe_value%1#0",
        "remaining#0",
        "maybe_value%6#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "979": {
      "op": "uncover 5",
      "stack_out": [
        "remaining#0",
        "maybe_value%6#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%1#0"
      ]
    },
    "981": {
      "op": "uncover 5",
      "stack_out": [
        "maybe_value%6#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%1#0",
        "remaining#0"
      ]
    },
    "983": {
      "op": "uncover 5",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%1#0",
        "remaining#0",
        "maybe_value%6#0"
      ]
    },
    "985": {
      "retsub": true,
      "op": "retsub"
    },
    "986": {
      "subroutine": "smart_contracts/algo_escrow/AlgoEscrowContract.algo.ts::AlgoEscrowContract.getParticipants",
      "params": {},
      "block": "getParticipants",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "987": {
      "op": "bytec_2 // \"buyer\"",
      "defined_out": [
        "\"buyer\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"buyer\""
      ]
    },
    "988": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "989": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "990": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "991": {
      "op": "bytec 4 // \"seller\"",
      "defined_out": [
        "\"seller\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"seller\""
      ]
    },
    "993": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "994": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "995": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "996": {
      "op": "bytec 9 // \"arbiter\"",
      "defined_out": [
        "\"arbiter\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0",
        "\"arbiter\""
      ]
    },
    "998": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "999": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "1000": {
      "retsub": true,
      "op": "retsub"
    }
  }
}