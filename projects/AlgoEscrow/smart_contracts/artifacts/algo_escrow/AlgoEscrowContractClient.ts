/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"AlgoEscrowContract","structs":{},"methods":[{"name":"createEscrow","args":[{"type":"account","name":"buyer"},{"type":"account","name":"seller"},{"type":"account","name":"arbiter"},{"type":"uint64","name":"totalMilestones"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"approveMilestone","args":[{"type":"uint64","name":"milestoneIndex"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"openDispute","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"resolveDispute","args":[{"type":"uint64","name":"releaseToSeller"},{"type":"uint64","name":"refundToBuyer"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"cancelAndRefund","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getStatus","args":[],"returns":{"type":"(byte[],uint64,uint64,uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getParticipants","args":[],"returns":{"type":"(address,address,address)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":6,"bytes":4},"local":{"ints":0,"bytes":0}},"keys":{"global":{"buyer":{"keyType":"AVMString","valueType":"address","key":"YnV5ZXI="},"seller":{"keyType":"AVMString","valueType":"address","key":"c2VsbGVy"},"arbiter":{"keyType":"AVMString","valueType":"address","key":"YXJiaXRlcg=="},"totalAmount":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxBbW91bnQ="},"releasedAmount":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmVsZWFzZWRBbW91bnQ="},"totalMilestones":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxNaWxlc3RvbmVz"},"completedMilestones":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y29tcGxldGVkTWlsZXN0b25lcw=="},"status":{"keyType":"AVMString","valueType":"AVMBytes","key":"c3RhdHVz"},"createdAt":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y3JlYXRlZEF0"},"lastUpdated":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdFVwZGF0ZWQ="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[577],"errorMessage":"All milestones done"},{"pc":[785],"errorMessage":"Amounts must balance"},{"pc":[719],"errorMessage":"Can dispute only active"},{"pc":[892],"errorMessage":"Funds already released"},{"pc":[558],"errorMessage":"Invalid status"},{"pc":[460],"errorMessage":"Must have milestones"},{"pc":[768],"errorMessage":"No dispute to resolve"},{"pc":[886],"errorMessage":"Not active escrow"},{"pc":[228,250,312,324,354,366,387],"errorMessage":"OnCompletion is not NoOp"},{"pc":[760],"errorMessage":"Only arbiter can resolve"},{"pc":[536],"errorMessage":"Only buyer can approve milestone"},{"pc":[878],"errorMessage":"Only buyer can cancel"},{"pc":[457],"errorMessage":"Only buyer can create escrow"},{"pc":[711],"errorMessage":"Only participants can dispute"},{"pc":[569],"errorMessage":"Wrong milestone index"},{"pc":[446],"errorMessage":"can only call when creating"},{"pc":[231,253,315,327,357,369,390],"errorMessage":"can only call when not creating"},{"pc":[534,540,550,563,574,582,590,614,627,632,694,705,715,758,764,773,777,796,819,837,873,882,890,898,950,954,962,967,972,976,989,994,999],"errorMessage":"check GlobalState exists"},{"pc":[335,344,377,431],"errorMessage":"invalid number of bytes for arc4.uint64"},{"pc":[398,409,420],"errorMessage":"invalid number of bytes for arc4.uint8"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiADAAEIJg4Gc3RhdHVzDnJlbGVhc2VkQW1vdW50BWJ1eWVyC2xhc3RVcGRhdGVkBnNlbGxlchNjb21wbGV0ZWRNaWxlc3RvbmVzC3RvdGFsQW1vdW50D3RvdGFsTWlsZXN0b25lcwZhY3RpdmUHYXJiaXRlcgQVH3x1E21pbGVzdG9uZV9jb21wbGV0ZWQJY29tcGxldGVkCGRpc3B1dGVkMRtBAQ+CBwQGzNqjBJ8q43MEmzmG5wScxMRGBJzeob8EnyMepQQh2L7QNhoAjgcAoQCMAIAAYgBWABgAAiJDMRkURDEYRIgC704CUExQJwpMULAjQzEZFEQxGESIArFLBRUWVwYCTwZQTwUWTwUWTwUWTwUWTwUWgAIAKk8FUE8EUE8DUE8CUExQTFAnCkxQsCNDMRkURDEYRIgCJSNDMRkURDEYRDYaAUkVJBJEFzYaAkkVJBJEF4gBkCNDMRkURDEYRIgBSCNDMRkURDEYRDYaAUkVJBJEF4gAkCNDMRkURDEYRDYaAUkVIxJEF8AcNhoCSRUjEkQXwBw2GgNJFSMSRBfAHDYaBEkVJBJEF4gADSNDMRlA/yQxGBREI0OKBAAxAIv8EkSL/0Qqi/xnJwSL/WcnCYv+ZycHi/9nJwUiZykiZygnCGeACWNyZWF0ZWRBdDIHZysyB2eADUVzY3Jvd0NyZWF0ZWSwiYoBADEAIiplRBJEIihlRCcIEkAACiIoZUQnCxJBAIAjRCInBWVEi/9LARJEIicHZURKDEQiJwZlREwKsSInBGVESwGyCLIHI7IQIrIBs0wjCCcFTGciKWVECClMZysyB2ciJwVlRCInB2VEEkEAFygnDGeAD0VzY3Jvd0NvbXBsZXRlZLCJKCcLZ4ARTWlsZXN0b25lQXBwcm92ZWSwiSJC/30xACIqZUQSQAALMQAiJwRlRBJBACMjRCIoZUQnCBJEKCcNZysyB2eADURpc3B1dGVPcGVuZWSwiSJC/9qKAgAxACInCWVEEkQiKGVEJw0SRCInBmVEIillRAmL/ov/CBJEi/5BABOxIicEZUSL/rIIsgcjshAisgGzi/9BABKxIiplRIv/sgiyByOyECKyAbMiJwZlRClMZygnDGcrMgdngA9EaXNwdXRlUmVzb2x2ZWSwiTEAIiplRExLARJEIihlRCcIEkQiKWVEFESxIicGZUSyCLIHI7IQIrIBsyiACWNhbmNlbGxlZGcrMgdngA9Fc2Nyb3dDYW5jZWxsZWSwiSInBmVEIillRExLAQkiKGVEIicFZUQiJwdlRCIrZUROA08FTwVPBYkiKmVEIicEZUQiJwllRIk=","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the AlgoEscrowContract contract
 */
export type AlgoEscrowContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createEscrow(account,account,account,uint64)void': {
      buyer: Uint8Array | string
      seller: Uint8Array | string
      arbiter: Uint8Array | string
      totalMilestones: bigint | number
    }
    'approveMilestone(uint64)void': {
      milestoneIndex: bigint | number
    }
    'openDispute()void': Record<string, never>
    'resolveDispute(uint64,uint64)void': {
      releaseToSeller: bigint | number
      refundToBuyer: bigint | number
    }
    'cancelAndRefund()void': Record<string, never>
    'getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)': Record<string, never>
    'getParticipants()(address,address,address)': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createEscrow(account,account,account,uint64)void': [buyer: Uint8Array | string, seller: Uint8Array | string, arbiter: Uint8Array | string, totalMilestones: bigint | number]
    'approveMilestone(uint64)void': [milestoneIndex: bigint | number]
    'openDispute()void': []
    'resolveDispute(uint64,uint64)void': [releaseToSeller: bigint | number, refundToBuyer: bigint | number]
    'cancelAndRefund()void': []
    'getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)': []
    'getParticipants()(address,address,address)': []
  }
}

/**
 * The return type for each method
 */
export type AlgoEscrowContractReturns = {
  'createEscrow(account,account,account,uint64)void': void
  'approveMilestone(uint64)void': void
  'openDispute()void': void
  'resolveDispute(uint64,uint64)void': void
  'cancelAndRefund()void': void
  'getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)': [Uint8Array, bigint, bigint, bigint, bigint, bigint]
  'getParticipants()(address,address,address)': [string, string, string]
}

/**
 * Defines the types of available calls and state of the AlgoEscrowContract smart contract.
 */
export type AlgoEscrowContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createEscrow(account,account,account,uint64)void' | 'createEscrow', {
      argsObj: AlgoEscrowContractArgs['obj']['createEscrow(account,account,account,uint64)void']
      argsTuple: AlgoEscrowContractArgs['tuple']['createEscrow(account,account,account,uint64)void']
      returns: AlgoEscrowContractReturns['createEscrow(account,account,account,uint64)void']
    }>
    & Record<'approveMilestone(uint64)void' | 'approveMilestone', {
      argsObj: AlgoEscrowContractArgs['obj']['approveMilestone(uint64)void']
      argsTuple: AlgoEscrowContractArgs['tuple']['approveMilestone(uint64)void']
      returns: AlgoEscrowContractReturns['approveMilestone(uint64)void']
    }>
    & Record<'openDispute()void' | 'openDispute', {
      argsObj: AlgoEscrowContractArgs['obj']['openDispute()void']
      argsTuple: AlgoEscrowContractArgs['tuple']['openDispute()void']
      returns: AlgoEscrowContractReturns['openDispute()void']
    }>
    & Record<'resolveDispute(uint64,uint64)void' | 'resolveDispute', {
      argsObj: AlgoEscrowContractArgs['obj']['resolveDispute(uint64,uint64)void']
      argsTuple: AlgoEscrowContractArgs['tuple']['resolveDispute(uint64,uint64)void']
      returns: AlgoEscrowContractReturns['resolveDispute(uint64,uint64)void']
    }>
    & Record<'cancelAndRefund()void' | 'cancelAndRefund', {
      argsObj: AlgoEscrowContractArgs['obj']['cancelAndRefund()void']
      argsTuple: AlgoEscrowContractArgs['tuple']['cancelAndRefund()void']
      returns: AlgoEscrowContractReturns['cancelAndRefund()void']
    }>
    & Record<'getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)' | 'getStatus', {
      argsObj: AlgoEscrowContractArgs['obj']['getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)']
      argsTuple: AlgoEscrowContractArgs['tuple']['getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)']
      returns: AlgoEscrowContractReturns['getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'getParticipants()(address,address,address)' | 'getParticipants', {
      argsObj: AlgoEscrowContractArgs['obj']['getParticipants()(address,address,address)']
      argsTuple: AlgoEscrowContractArgs['tuple']['getParticipants()(address,address,address)']
      returns: AlgoEscrowContractReturns['getParticipants()(address,address,address)']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        buyer: string
        seller: string
        arbiter: string
        totalAmount: bigint
        releasedAmount: bigint
        totalMilestones: bigint
        completedMilestones: bigint
        status: BinaryState
        createdAt: bigint
        lastUpdated: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AlgoEscrowContractSignatures = keyof AlgoEscrowContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AlgoEscrowContractNonVoidMethodSignatures = keyof AlgoEscrowContractTypes['methods'] extends infer T ? T extends keyof AlgoEscrowContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AlgoEscrowContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AlgoEscrowContractSignatures> = AlgoEscrowContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AlgoEscrowContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AlgoEscrowContractSignatures> = AlgoEscrowContractTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AlgoEscrowContractTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AlgoEscrowContractCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AlgoEscrowContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AlgoEscrowContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AlgoEscrowContract smart contract
 */
export abstract class AlgoEscrowContractParamsFactory {
  /**
   * Constructs a no op call for the createEscrow(account,account,account,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createEscrow(params: CallParams<AlgoEscrowContractArgs['obj']['createEscrow(account,account,account,uint64)void'] | AlgoEscrowContractArgs['tuple']['createEscrow(account,account,account,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createEscrow(account,account,account,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.buyer, params.args.seller, params.args.arbiter, params.args.totalMilestones],
    }
  }
  /**
   * Constructs a no op call for the approveMilestone(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static approveMilestone(params: CallParams<AlgoEscrowContractArgs['obj']['approveMilestone(uint64)void'] | AlgoEscrowContractArgs['tuple']['approveMilestone(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'approveMilestone(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.milestoneIndex],
    }
  }
  /**
   * Constructs a no op call for the openDispute()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static openDispute(params: CallParams<AlgoEscrowContractArgs['obj']['openDispute()void'] | AlgoEscrowContractArgs['tuple']['openDispute()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'openDispute()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the resolveDispute(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resolveDispute(params: CallParams<AlgoEscrowContractArgs['obj']['resolveDispute(uint64,uint64)void'] | AlgoEscrowContractArgs['tuple']['resolveDispute(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'resolveDispute(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.releaseToSeller, params.args.refundToBuyer],
    }
  }
  /**
   * Constructs a no op call for the cancelAndRefund()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static cancelAndRefund(params: CallParams<AlgoEscrowContractArgs['obj']['cancelAndRefund()void'] | AlgoEscrowContractArgs['tuple']['cancelAndRefund()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'cancelAndRefund()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getStatus()(byte[],uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getStatus(params: CallParams<AlgoEscrowContractArgs['obj']['getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)'] | AlgoEscrowContractArgs['tuple']['getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getParticipants()(address,address,address) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getParticipants(params: CallParams<AlgoEscrowContractArgs['obj']['getParticipants()(address,address,address)'] | AlgoEscrowContractArgs['tuple']['getParticipants()(address,address,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getParticipants()(address,address,address)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AlgoEscrowContract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AlgoEscrowContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AlgoEscrowContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AlgoEscrowContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AlgoEscrowContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AlgoEscrowContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AlgoEscrowContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new AlgoEscrowContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AlgoEscrowContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AlgoEscrowContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AlgoEscrowContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new AlgoEscrowContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AlgoEscrowContract smart contract
 */
export class AlgoEscrowContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AlgoEscrowContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AlgoEscrowContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AlgoEscrowContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AlgoEscrowContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AlgoEscrowContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AlgoEscrowContractClient> {
    return new AlgoEscrowContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AlgoEscrowContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AlgoEscrowContractClient> {
    return new AlgoEscrowContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AlgoEscrowContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AlgoEscrowContract smart contract using the `createEscrow(account,account,account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createEscrow: (params: CallParams<AlgoEscrowContractArgs['obj']['createEscrow(account,account,account,uint64)void'] | AlgoEscrowContractArgs['tuple']['createEscrow(account,account,account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoEscrowContractParamsFactory.createEscrow(params))
    },

    /**
     * Makes a call to the AlgoEscrowContract smart contract using the `approveMilestone(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    approveMilestone: (params: CallParams<AlgoEscrowContractArgs['obj']['approveMilestone(uint64)void'] | AlgoEscrowContractArgs['tuple']['approveMilestone(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoEscrowContractParamsFactory.approveMilestone(params))
    },

    /**
     * Makes a call to the AlgoEscrowContract smart contract using the `openDispute()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    openDispute: (params: CallParams<AlgoEscrowContractArgs['obj']['openDispute()void'] | AlgoEscrowContractArgs['tuple']['openDispute()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoEscrowContractParamsFactory.openDispute(params))
    },

    /**
     * Makes a call to the AlgoEscrowContract smart contract using the `resolveDispute(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    resolveDispute: (params: CallParams<AlgoEscrowContractArgs['obj']['resolveDispute(uint64,uint64)void'] | AlgoEscrowContractArgs['tuple']['resolveDispute(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoEscrowContractParamsFactory.resolveDispute(params))
    },

    /**
     * Makes a call to the AlgoEscrowContract smart contract using the `cancelAndRefund()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    cancelAndRefund: (params: CallParams<AlgoEscrowContractArgs['obj']['cancelAndRefund()void'] | AlgoEscrowContractArgs['tuple']['cancelAndRefund()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoEscrowContractParamsFactory.cancelAndRefund(params))
    },

    /**
     * Makes a call to the AlgoEscrowContract smart contract using the `getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getStatus: (params: CallParams<AlgoEscrowContractArgs['obj']['getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)'] | AlgoEscrowContractArgs['tuple']['getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoEscrowContractParamsFactory.getStatus(params))
    },

    /**
     * Makes a call to the AlgoEscrowContract smart contract using the `getParticipants()(address,address,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getParticipants: (params: CallParams<AlgoEscrowContractArgs['obj']['getParticipants()(address,address,address)'] | AlgoEscrowContractArgs['tuple']['getParticipants()(address,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AlgoEscrowContractParamsFactory.getParticipants(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AlgoEscrowContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AlgoEscrowContract smart contract using the `createEscrow(account,account,account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createEscrow: (params: CallParams<AlgoEscrowContractArgs['obj']['createEscrow(account,account,account,uint64)void'] | AlgoEscrowContractArgs['tuple']['createEscrow(account,account,account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoEscrowContractParamsFactory.createEscrow(params))
    },

    /**
     * Makes a call to the AlgoEscrowContract smart contract using the `approveMilestone(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    approveMilestone: (params: CallParams<AlgoEscrowContractArgs['obj']['approveMilestone(uint64)void'] | AlgoEscrowContractArgs['tuple']['approveMilestone(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoEscrowContractParamsFactory.approveMilestone(params))
    },

    /**
     * Makes a call to the AlgoEscrowContract smart contract using the `openDispute()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    openDispute: (params: CallParams<AlgoEscrowContractArgs['obj']['openDispute()void'] | AlgoEscrowContractArgs['tuple']['openDispute()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoEscrowContractParamsFactory.openDispute(params))
    },

    /**
     * Makes a call to the AlgoEscrowContract smart contract using the `resolveDispute(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    resolveDispute: (params: CallParams<AlgoEscrowContractArgs['obj']['resolveDispute(uint64,uint64)void'] | AlgoEscrowContractArgs['tuple']['resolveDispute(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoEscrowContractParamsFactory.resolveDispute(params))
    },

    /**
     * Makes a call to the AlgoEscrowContract smart contract using the `cancelAndRefund()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    cancelAndRefund: (params: CallParams<AlgoEscrowContractArgs['obj']['cancelAndRefund()void'] | AlgoEscrowContractArgs['tuple']['cancelAndRefund()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoEscrowContractParamsFactory.cancelAndRefund(params))
    },

    /**
     * Makes a call to the AlgoEscrowContract smart contract using the `getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getStatus: (params: CallParams<AlgoEscrowContractArgs['obj']['getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)'] | AlgoEscrowContractArgs['tuple']['getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoEscrowContractParamsFactory.getStatus(params))
    },

    /**
     * Makes a call to the AlgoEscrowContract smart contract using the `getParticipants()(address,address,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getParticipants: (params: CallParams<AlgoEscrowContractArgs['obj']['getParticipants()(address,address,address)'] | AlgoEscrowContractArgs['tuple']['getParticipants()(address,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AlgoEscrowContractParamsFactory.getParticipants(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AlgoEscrowContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AlgoEscrowContract smart contract using the `createEscrow(account,account,account,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createEscrow: async (params: CallParams<AlgoEscrowContractArgs['obj']['createEscrow(account,account,account,uint64)void'] | AlgoEscrowContractArgs['tuple']['createEscrow(account,account,account,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoEscrowContractParamsFactory.createEscrow(params))
      return {...result, return: result.return as unknown as (undefined | AlgoEscrowContractReturns['createEscrow(account,account,account,uint64)void'])}
    },

    /**
     * Makes a call to the AlgoEscrowContract smart contract using the `approveMilestone(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    approveMilestone: async (params: CallParams<AlgoEscrowContractArgs['obj']['approveMilestone(uint64)void'] | AlgoEscrowContractArgs['tuple']['approveMilestone(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoEscrowContractParamsFactory.approveMilestone(params))
      return {...result, return: result.return as unknown as (undefined | AlgoEscrowContractReturns['approveMilestone(uint64)void'])}
    },

    /**
     * Makes a call to the AlgoEscrowContract smart contract using the `openDispute()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    openDispute: async (params: CallParams<AlgoEscrowContractArgs['obj']['openDispute()void'] | AlgoEscrowContractArgs['tuple']['openDispute()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoEscrowContractParamsFactory.openDispute(params))
      return {...result, return: result.return as unknown as (undefined | AlgoEscrowContractReturns['openDispute()void'])}
    },

    /**
     * Makes a call to the AlgoEscrowContract smart contract using the `resolveDispute(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    resolveDispute: async (params: CallParams<AlgoEscrowContractArgs['obj']['resolveDispute(uint64,uint64)void'] | AlgoEscrowContractArgs['tuple']['resolveDispute(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoEscrowContractParamsFactory.resolveDispute(params))
      return {...result, return: result.return as unknown as (undefined | AlgoEscrowContractReturns['resolveDispute(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the AlgoEscrowContract smart contract using the `cancelAndRefund()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    cancelAndRefund: async (params: CallParams<AlgoEscrowContractArgs['obj']['cancelAndRefund()void'] | AlgoEscrowContractArgs['tuple']['cancelAndRefund()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoEscrowContractParamsFactory.cancelAndRefund(params))
      return {...result, return: result.return as unknown as (undefined | AlgoEscrowContractReturns['cancelAndRefund()void'])}
    },

    /**
     * Makes a call to the AlgoEscrowContract smart contract using the `getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getStatus: async (params: CallParams<AlgoEscrowContractArgs['obj']['getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)'] | AlgoEscrowContractArgs['tuple']['getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoEscrowContractParamsFactory.getStatus(params))
      return {...result, return: result.return as unknown as (undefined | AlgoEscrowContractReturns['getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the AlgoEscrowContract smart contract using the `getParticipants()(address,address,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getParticipants: async (params: CallParams<AlgoEscrowContractArgs['obj']['getParticipants()(address,address,address)'] | AlgoEscrowContractArgs['tuple']['getParticipants()(address,address,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AlgoEscrowContractParamsFactory.getParticipants(params))
      return {...result, return: result.return as unknown as (undefined | AlgoEscrowContractReturns['getParticipants()(address,address,address)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AlgoEscrowContractClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current AlgoEscrowContract app
   */
  state = {
    /**
     * Methods to access global state for the current AlgoEscrowContract app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          buyer: result.buyer,
          seller: result.seller,
          arbiter: result.arbiter,
          totalAmount: result.totalAmount,
          releasedAmount: result.releasedAmount,
          totalMilestones: result.totalMilestones,
          completedMilestones: result.completedMilestones,
          status: new BinaryStateValue(result.status),
          createdAt: result.createdAt,
          lastUpdated: result.lastUpdated,
        }
      },
      /**
       * Get the current value of the buyer key in global state
       */
      buyer: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("buyer")) as string | undefined },
      /**
       * Get the current value of the seller key in global state
       */
      seller: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("seller")) as string | undefined },
      /**
       * Get the current value of the arbiter key in global state
       */
      arbiter: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("arbiter")) as string | undefined },
      /**
       * Get the current value of the totalAmount key in global state
       */
      totalAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalAmount")) as bigint | undefined },
      /**
       * Get the current value of the releasedAmount key in global state
       */
      releasedAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("releasedAmount")) as bigint | undefined },
      /**
       * Get the current value of the totalMilestones key in global state
       */
      totalMilestones: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalMilestones")) as bigint | undefined },
      /**
       * Get the current value of the completedMilestones key in global state
       */
      completedMilestones: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("completedMilestones")) as bigint | undefined },
      /**
       * Get the current value of the status key in global state
       */
      status: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("status")) as Uint8Array | undefined) },
      /**
       * Get the current value of the createdAt key in global state
       */
      createdAt: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("createdAt")) as bigint | undefined },
      /**
       * Get the current value of the lastUpdated key in global state
       */
      lastUpdated: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastUpdated")) as bigint | undefined },
    },
  }

  public newGroup(): AlgoEscrowContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createEscrow(account,account,account,uint64)void method call against the AlgoEscrowContract contract
       */
      createEscrow(params: CallParams<AlgoEscrowContractArgs['obj']['createEscrow(account,account,account,uint64)void'] | AlgoEscrowContractArgs['tuple']['createEscrow(account,account,account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createEscrow(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a approveMilestone(uint64)void method call against the AlgoEscrowContract contract
       */
      approveMilestone(params: CallParams<AlgoEscrowContractArgs['obj']['approveMilestone(uint64)void'] | AlgoEscrowContractArgs['tuple']['approveMilestone(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.approveMilestone(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a openDispute()void method call against the AlgoEscrowContract contract
       */
      openDispute(params: CallParams<AlgoEscrowContractArgs['obj']['openDispute()void'] | AlgoEscrowContractArgs['tuple']['openDispute()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.openDispute(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a resolveDispute(uint64,uint64)void method call against the AlgoEscrowContract contract
       */
      resolveDispute(params: CallParams<AlgoEscrowContractArgs['obj']['resolveDispute(uint64,uint64)void'] | AlgoEscrowContractArgs['tuple']['resolveDispute(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resolveDispute(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a cancelAndRefund()void method call against the AlgoEscrowContract contract
       */
      cancelAndRefund(params: CallParams<AlgoEscrowContractArgs['obj']['cancelAndRefund()void'] | AlgoEscrowContractArgs['tuple']['cancelAndRefund()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.cancelAndRefund(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getStatus()(byte[],uint64,uint64,uint64,uint64,uint64) method call against the AlgoEscrowContract contract
       */
      getStatus(params: CallParams<AlgoEscrowContractArgs['obj']['getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)'] | AlgoEscrowContractArgs['tuple']['getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getStatus(params)))
        resultMappers.push((v) => client.decodeReturnValue('getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a getParticipants()(address,address,address) method call against the AlgoEscrowContract contract
       */
      getParticipants(params: CallParams<AlgoEscrowContractArgs['obj']['getParticipants()(address,address,address)'] | AlgoEscrowContractArgs['tuple']['getParticipants()(address,address,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getParticipants(params)))
        resultMappers.push((v) => client.decodeReturnValue('getParticipants()(address,address,address)', v))
        return this
      },
      /**
       * Add a clear state call to the AlgoEscrowContract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AlgoEscrowContractComposer
  }
}
export type AlgoEscrowContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createEscrow(account,account,account,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createEscrow(params?: CallParams<AlgoEscrowContractArgs['obj']['createEscrow(account,account,account,uint64)void'] | AlgoEscrowContractArgs['tuple']['createEscrow(account,account,account,uint64)void']>): AlgoEscrowContractComposer<[...TReturns, AlgoEscrowContractReturns['createEscrow(account,account,account,uint64)void'] | undefined]>

  /**
   * Calls the approveMilestone(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveMilestone(params?: CallParams<AlgoEscrowContractArgs['obj']['approveMilestone(uint64)void'] | AlgoEscrowContractArgs['tuple']['approveMilestone(uint64)void']>): AlgoEscrowContractComposer<[...TReturns, AlgoEscrowContractReturns['approveMilestone(uint64)void'] | undefined]>

  /**
   * Calls the openDispute()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  openDispute(params?: CallParams<AlgoEscrowContractArgs['obj']['openDispute()void'] | AlgoEscrowContractArgs['tuple']['openDispute()void']>): AlgoEscrowContractComposer<[...TReturns, AlgoEscrowContractReturns['openDispute()void'] | undefined]>

  /**
   * Calls the resolveDispute(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resolveDispute(params?: CallParams<AlgoEscrowContractArgs['obj']['resolveDispute(uint64,uint64)void'] | AlgoEscrowContractArgs['tuple']['resolveDispute(uint64,uint64)void']>): AlgoEscrowContractComposer<[...TReturns, AlgoEscrowContractReturns['resolveDispute(uint64,uint64)void'] | undefined]>

  /**
   * Calls the cancelAndRefund()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cancelAndRefund(params?: CallParams<AlgoEscrowContractArgs['obj']['cancelAndRefund()void'] | AlgoEscrowContractArgs['tuple']['cancelAndRefund()void']>): AlgoEscrowContractComposer<[...TReturns, AlgoEscrowContractReturns['cancelAndRefund()void'] | undefined]>

  /**
   * Calls the getStatus()(byte[],uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getStatus(params?: CallParams<AlgoEscrowContractArgs['obj']['getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)'] | AlgoEscrowContractArgs['tuple']['getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)']>): AlgoEscrowContractComposer<[...TReturns, AlgoEscrowContractReturns['getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the getParticipants()(address,address,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getParticipants(params?: CallParams<AlgoEscrowContractArgs['obj']['getParticipants()(address,address,address)'] | AlgoEscrowContractArgs['tuple']['getParticipants()(address,address,address)']>): AlgoEscrowContractComposer<[...TReturns, AlgoEscrowContractReturns['getParticipants()(address,address,address)'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AlgoEscrowContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AlgoEscrowContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AlgoEscrowContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AlgoEscrowContractComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AlgoEscrowContractComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AlgoEscrowContractComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AlgoEscrowContractComposerResults<TReturns>>
}
export type AlgoEscrowContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

