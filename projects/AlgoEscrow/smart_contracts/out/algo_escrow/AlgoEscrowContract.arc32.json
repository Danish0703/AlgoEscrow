{
    "hints": {
        "createEscrow(account,account,account,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "approveMilestone(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "openDispute()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "resolveDispute(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "cancelAndRefund()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getStatus()(byte[],uint64,uint64,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getParticipants()(address,address,address)": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 4,
            "num_uints": 6
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "arbiter": {
                    "type": "bytes",
                    "key": "arbiter"
                },
                "buyer": {
                    "type": "bytes",
                    "key": "buyer"
                },
                "completedMilestones": {
                    "type": "uint64",
                    "key": "completedMilestones"
                },
                "createdAt": {
                    "type": "uint64",
                    "key": "createdAt"
                },
                "lastUpdated": {
                    "type": "uint64",
                    "key": "lastUpdated"
                },
                "releasedAmount": {
                    "type": "uint64",
                    "key": "releasedAmount"
                },
                "seller": {
                    "type": "bytes",
                    "key": "seller"
                },
                "status": {
                    "type": "bytes",
                    "key": "status"
                },
                "totalAmount": {
                    "type": "uint64",
                    "key": "totalAmount"
                },
                "totalMilestones": {
                    "type": "uint64",
                    "key": "totalMilestones"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "AlgoEscrowContract",
        "methods": [
            {
                "name": "createEscrow",
                "args": [
                    {
                        "type": "account",
                        "name": "buyer"
                    },
                    {
                        "type": "account",
                        "name": "seller"
                    },
                    {
                        "type": "account",
                        "name": "arbiter"
                    },
                    {
                        "type": "uint64",
                        "name": "totalMilestones"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "approveMilestone",
                "args": [
                    {
                        "type": "uint64",
                        "name": "milestoneIndex"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "openDispute",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "resolveDispute",
                "args": [
                    {
                        "type": "uint64",
                        "name": "releaseToSeller"
                    },
                    {
                        "type": "uint64",
                        "name": "refundToBuyer"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "cancelAndRefund",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "getStatus",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(byte[],uint64,uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "getParticipants",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(address,address,address)"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}